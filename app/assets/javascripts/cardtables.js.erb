var CP = ( function(){
     var table = {};
     return {
	 stacks: {},
	 all_cards: {},
	 how_many: 0,
         // for movie effect
	 postopone: function(move,time){
	     setTimeout(function(){ 
		 CP[move.action].apply(CP,move.params);},time);	     
	 },

	 from_stack_move: function(stack_from,i,stack_to){
	     card = CP.stacks[stack_from].cards[i];
	     CP.move_card(stack_from,i,CP.stacks[stack_to].xnext,CP.stacks[stack_to].ynext,CP.stacks[stack_to].znext);
	     newstack = CP.stacks[stack_to];
	     card.stack_id = stack_to;
	     card.in_stack_pos =newstack.cards.length;
	     newstack.cards[newstack.cards.length] = card;
	     newstack.update_next_pos();
	 },

	 move_card: function(stack_id,i,px,py,pz){
	     CP.stacks[stack_id].cards[i].move_to(px,py,pz);
	     CP.stacks[stack_id].remove_card(i,true);
	 },

	 create_table: function(ele,pxsize){
	     table = {
		 parent: ele,
		 pxsize: pxsize
	     };
	     ele.css({"font-size": pxsize+'px' }); 
	     ele.css({position: 'relative'});
	     return table;
	 },

	 get_pxsize: function(){
	     return table.pxsize;
	 },

	 add_card_to_stack: function(stack_id,card_id,show){
	     c = Cards.create_card(card_id);
	     c.stack_id = stack_id;
	     CP.stacks[stack_id].add_card(c);
	     if (show === true ) {
		 CP.show_stack(stack_id);
	     }
	 },

	 flip_card: function(stack_id,i,card_id){
	     card = CP.stacks[stack_id].cards[i];
	     CP.stacks[stack_id].remove_card(i,true);
	     card.get_div().hide();
	     CP.add_card_to_stack(stack_id,card_id,true);
	 },

	 show_stack: function(stack_id) {
	     CP.stacks[stack_id].show();
	 },

	 get_table: function(){
	     return table.parent;
	 },
	 // optimal size is 5px 
	 // every other position will scale

	 scale: function(x) {
	     return x* (this.get_pxsize() / 5)
	 },

	 get_passians_data: function(){
	     return { moves:
		      [{
			  action: "create_stack",
			  params: ["draw","0",30,30,20] },
		       {
			  action: "add_card_to_stack",
			  params: ["draw",53,true] },
		       {
			  action: "create_stack",
			  params: ["col1","V",200,30,20] },
		       {  
			  action: "add_card_to_stack",
			  params: ["col1",12,true] },
		       {
			  action: "create_stack",
			  params: ["col2","V",300,30,20] },
		       {  
			  action: "add_card_to_stack",
			  params: ["col2",53,true] },
		       {  
			  action: "add_card_to_stack",
			  params: ["col2",44,true] },
		       {
			  action: "create_stack",
			  params: ["col3","V",400,30,20] },
		       {  
			  action: "add_card_to_stack",
			  params: ["col3",53,true] },
		       {  
			  action: "add_card_to_stack",
			  params: ["col3",53,true] },
		       {  
			  action: "add_card_to_stack",
			  params: ["col3",1,true] },
       		       {
			  action: "create_stack",
			  params: ["col4","V",500,30,20] },
		       {  
			  action: "add_card_to_stack",
			  params: ["col4",53,true] },
		       {  
			  action: "add_card_to_stack",
			  params: ["col4",53,true] },
		       {  
			  action: "add_card_to_stack",
			  params: ["col4",53,true] },
		       {  
			  action: "add_card_to_stack",
			   params: ["col4",16,true] },
		       {
			  action: "create_stack",
			  params: ["col5","V",600,30,20] },
		       {
			  action: "add_cards_to_stack",
			  params: ["col5",[53,53,53,53,2],true] },
		       {
			  action: "create_stack",
			  params: ["col6","V",700,30,20] },
		       {
			  action: "add_cards_to_stack",
			  params: ["col6",[53,53,53,53,53,32],true] },
		       {
			  action: "create_stack",
			  params: ["col7","V",800,30,20] },
		       {
			  action: "add_cards_to_stack",
			  params: ["col7",[53,53,53,53,53,53,41],true] },
       		       {
			   action: "from_stack_move",
			   params: ["col4",3,"col7"]},

		       {   action: "move_stack",
			   params: ["col7",800,130]},

		       {   action: "move_stack",
			   params: ["col7",800,30]},
       		       {
			   action: "flip_card",
			   params: ["col4",2,44]},
       		       {
			   action: "from_stack_move",
			   params: ["col4",2,"col6"]},
		       {
			   action: "flip_card",
			   params: ["col4",1,45]},
       		       {
			  action: "create_stack",
			  params: ["draw_open","0",120,30,20] },	       
		       {
			   action: "add_card_to_stack",
			   params: ["draw",53]},
       		       
		       {
			   action: "flip_card",
			   params: ["draw",1,27]},
       		       {
			   action: "from_stack_move",
			   params: ["draw",1,"draw_open"]},
       		       {
			  action: "create_stack",
  			  params: ["up0","0",910,30] },
       		       {
			  action: "create_stack",
  			  params: ["up1","0",910,150] },
       		       {
			  action: "create_stack",
  			  params: ["up2","0",910,270] },
       		       {
			  action: "create_stack",
  			  params: ["up3","0",910,390] },
       		       {
			   action: "from_stack_move",
			   params: ["col3",2,"up0"]},
       		       {
			   action: "flip_card",
			   params: ["col3",1,28]},
       		       {
			   action: "from_stack_move",
			   params: ["draw_open",0,"up1"]},
		       {
			   action: "add_card_to_stack",
			   params: ["draw",53]},
		       {
			   action: "flip_card",
			   params: ["draw",1,51]},
       		       {
			   action: "from_stack_move",
			   params: ["draw",1,"draw_open"]},
       		       {
			   action: "from_stack_move",
			   params: ["col5",4,"up0"]},
       		       {
			   action: "flip_card",
			   params: ["col5",3,29]},
       		       {
			   action: "from_stack_move",
			   params: ["col3",1,"up1"]},
       		       {
			   action: "flip_card",
			   params: ["col3",0,37]},

		      ]};
	 },
	 insert_card_in_stack: function(stack_id,card_id,i){
	     card = Cards.create_card(card_id);	     
	     CP.stacks[stack_id].insert_card(i,card);
	     CP.stacks[stack_id].cards[i].show(this.parent);
	 },
	 add_cards_to_stack: function(stack_id,cards_ids,showstack){
	     for(i=0;i<cards_ids.length; i++){
		 CP.add_card_to_stack(stack_id,cards_ids[i],'card' + cards_ids[i],true);
	     }
	     if (showstack === true ){
		 CP.show_stack(stack_id);
	     }
	 },
	 move_stack: function(stack_id,px,py){
	     CP.stacks[stack_id].move_to(px,py);
	 },
         // **************************************************************************
	 /// STACK
         /// **************************************************************************
	 create_stack: function(stack_id,stack_type,xpos,ypos,pixdist,positions){
	     xpos = CP.scale(xpos);
	     ypos = CP.scale(ypos);
	     if ( stack_type === "F" ) {
		 for (var k = 0; k< positions.length; k++){
		     positions[k] = this.scale(positions[k]);
		 } 
	     } else {
		 pixdist = this.scale(pixdist);
	     };
	     var stack = {
		 id: stack_id,
		 cards: [],
		 parent: CP.get_table(),
		 tstack: stack_type,
		 dpx: pixdist,
		 positions: positions,
		 x: xpos,
		 y: ypos,
		 xnext: xpos,
		 ynext: ypos,
		 znext: 1,
		 add_card: function(card){
		     card.in_stack_pos = this.cards.length;
		     this.cards[this.cards.length] = card;
		     card.set_position(this.xnext,this.ynext,this.znext);
		     this.update_next_pos();
		 },
		 show: function(){
		     for (var i=0;i< this.cards.length; i++){
			 this.cards[i].show(this.parent);
			 }
		 },

		 insert_card: function (atpos,card) {
		     console.log("insert card  " + card.to_s());
		     var new_cards = [];
		     for ( var i=0;i<this.cards.length;i++){
			 if (i<atpos) {
			         new_cards[i] = this.cards[i];
			 }  else 
			     if ( i >= atpos) {
				 console.log(" At " + (i+1) + "   " + this.cards[i].to_s());
				 new_cards[i+1] = this.cards[i];
			 }
	              }
		     new_cards[atpos] = card;
		     
		     this.cards = new_cards;
		     
		     console.log("How many" + this.cards.length);
		     for ( var k = 0; k < this.cards.length; k++){
			 this.update_card_position(k).show(this.parent);
			 console.log(k);
			 console.log("IN insert" + this.cards[k].to_s());
			 this.cards[k].show(this.parent);
		     }
		 },

		 update_card_position: function(i){
		     
		     if(this.tstack === 'V') {
			 this.cards[i].set_position(this.x,this.dpx*i+this.y,i);
		      };
		     if (this.tstack === 'H') {
			 this.cards[i].set_position(this.x + this.dpx*i,this.y,i);
		     }
		     if (this.tstack === '0') {
			 this.cards[i].set_position(this.x,this.y,i);
		     }
		     return this.cards[i];
		 },
		 remove_card: function(atpos,showstack) {
		     this.cards.splice(atpos,1);
		     for(var i=atpos; i< this.cards.length; i++){
			 this.update_card_position(i);
		     };
		     this.update_next_pos();
		     if (showstack === true) {
			 this.show();
		     }
		 },
		 move_to:function(xpos,ypos){
		     xpos = CP.scale(xpos);
		     ypos = CP.scale(ypos);
		     this.x = xpos;
		     this.y = ypos;
		     for (var i=0;i< this.cards.length; i++){
			 if ( this.tstack === 'H' ) {
			     this.cards[i].move_to(xpos+this.dpx*i,ypos,i);
			 }
			 if ( this.tstack === 'V' ) {
			     this.cards[i].move_to(xpos,this.dpx*i+ypos,i);
			 }
			 if (this.tstack === '0'){
			     this.cards[i].move_to(xpos,ypos,i);
			 }
		     }
		     this.update_next_pos();  
		 },
		
		 update_next_pos: function(){
		     if (this.tstack === 'H' ) {
			 this.xnext = this.x + this.cards.length*this.dpx;
			 this.ynext = this.y;
		     }
		     if (this.tstack === 'V') {
			 this.ynext = this.y + this.cards.length*this.dpx;
			 this.xnext = this.x;
		     }
		     if (this.tstack === '0') {
			 this.ynext = this.y;
			 this.xnext = this.x;
		     }
		     this.znext = this.znext + 1;
		 },
		 jump_to:function(xpos,ypos){
		     xpos = CP.scale(xpos);
		     ypos = CP.scale(ypos);
		     this.x = xpos;
		     this.y = ypos;
		     for (var i=0;i< this.cards.length; i++){
			 if (this.tstack === 'H'){
			     this.cards[i].jump_to(xpos+this.dpx*i,ypos,i);
			 }
			 if (this.tstack === 'V'){
			     this.cards[i].jump_to(xpos,this.dpx*i+ypos,i);
			 }
			 if (this.tstack === '0'){
			     this.cards[i].jump_to(xpos,ypos,i);
			 }
		     }
		     this.update_next_pos();
		 },
		 
		 get_card: function(i) {
		     return this.cards[i];
		 }
	     };
	     CP.stacks[stack_id] = stack;
	     return stack;
	 },

     };
 }());


$(document).ready(function(){
     var ele = $("#cardtable");
     var table = CP.create_table(ele,4);
     b = CP.get_passians_data();
     for ( var i = 0; i< b.moves.length ; i++) {
	move = b.moves[i];
	CP.postopone(move,i*300);
     };


});
