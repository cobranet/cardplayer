var CP = ( function(){
     var table = {};
     var divs = [
    "<%= Card.new(1).make_div %>",
    "<%= Card.new(2).make_div %>",
    "<%= Card.new(3).make_div %>",
    "<%= Card.new(4).make_div %>",
    "<%= Card.new(5).make_div %>",
    "<%= Card.new(6).make_div %>",
    "<%= Card.new(7).make_div %>",
    "<%= Card.new(8).make_div %>",
    "<%= Card.new(9).make_div %>",
    "<%= Card.new(10).make_div %>",
    "<%= Card.new(11).make_div %>",
    "<%= Card.new(12).make_div %>",
    "<%= Card.new(13).make_div %>",
    "<%= Card.new(14).make_div %>",
    "<%= Card.new(15).make_div %>",
    "<%= Card.new(16).make_div %>",
    "<%= Card.new(17).make_div %>",
    "<%= Card.new(18).make_div %>",
    "<%= Card.new(19).make_div %>",
    "<%= Card.new(20).make_div %>",
    "<%= Card.new(21).make_div %>",
    "<%= Card.new(22).make_div %>",
    "<%= Card.new(23).make_div %>",
    "<%= Card.new(24).make_div %>",
    "<%= Card.new(25).make_div %>",
    "<%= Card.new(26).make_div %>",
    "<%= Card.new(27).make_div %>",
    "<%= Card.new(28).make_div %>",
    "<%= Card.new(29).make_div %>",
    "<%= Card.new(30).make_div %>",
    "<%= Card.new(31).make_div %>",
    "<%= Card.new(32).make_div %>",
    "<%= Card.new(33).make_div %>",
    "<%= Card.new(34).make_div %>",
    "<%= Card.new(35).make_div %>",
    "<%= Card.new(36).make_div %>",
    "<%= Card.new(37).make_div %>",
    "<%= Card.new(38).make_div %>",
    "<%= Card.new(39).make_div %>",
    "<%= Card.new(40).make_div %>",
    "<%= Card.new(41).make_div %>",
    "<%= Card.new(42).make_div %>",
    "<%= Card.new(43).make_div %>",
    "<%= Card.new(44).make_div %>",
    "<%= Card.new(45).make_div %>",
    "<%= Card.new(46).make_div %>",
    "<%= Card.new(47).make_div %>",
    "<%= Card.new(48).make_div %>",
    "<%= Card.new(49).make_div %>",
    "<%= Card.new(50).make_div %>",
    "<%= Card.new(51).make_div %>",
    "<%= Card.new(52).make_div %>",
    "<%= Card.make_back %>"	 
     ];
     return {
	 stacks: {},
	 postopone: function(move,time){
	     setTimeout(function(){ 
		 CP[move.action].apply(CP,move.params);},time);	     
	 },
	 create_table: function(ele,pxsize){
	     table = {
		 parent: ele,
		 pxsize: pxsize
	     };
	     ele.css({"font-size": pxsize+'px' }); 
	     ele.css({position: 'relative'});
	     return table;
	 },
	 get_pxsize: function(){
	     return table.pxsize;
	 },
	 add_card_to_stack: function(stack_id,card_id,element_id,show){
	     c = CP.create_card(card_id,element_id);
	     console.log("LEFT" + CP.stacks["left"]);
	     CP.stacks[stack_id].add_card(c);
	     if (show === true ) {
		 CP.show_stack(stack_id);
	     }
	 },
	 show_stack: function(stack_id) {
	     console.log(CP.stacks);
	     CP.stacks[stack_id].show();
	 },
	 get_table: function(){
	     return table.parent;
	 },
	 // optimal size is 5px 
	 // every other position will scale
	 scale: function(x) {
	     return x* (this.get_pxsize() / 5)
	 },
	 get_data: function(){
	     return { moves: 
		      [{ 
			 action: "create_stack",
		 	 params: ["left","H",30,30,10] },
		       { 
			 action: "add_card_to_stack",
		 	 params: ["left", 6, "card6",true] },

		       { 
			 action: "add_card_to_stack",
		 	 params: ["left", 15, "card15",true] },
		       { 
			 action: "add_card_to_stack",
		 	 params: ["left", 21, "card21"] },
		       { 
			 action: "add_card_to_stack",
		 	 params: ["left", 25, "card25",true] }
		      ]};
		 
	     },
	 create_stack: function(stack_id,stack_type,xpos,ypos,pixdist){
	     xpos = CP.scale(xpos);
	     ypos = CP.scale(ypos);
	     pixdist = this.scale(pixdist);
	     var stack = {
		 id: stack_id,
		 cards: [],
		 parent: CP.get_table(),
		 tstack: stack_type,
		 dpx: pixdist,
		 x: xpos,
		 y: ypos,
		 xnext: xpos,
		 ynext: ypos,
		 add_card: function(card){
		     this.cards[this.cards.length] = card;
		     card.set_position(this.xnext,this.ynext);
		     this.update_next_pos();
		     },
		 show: function(){
		     for (var i=0;i< this.cards.length; i++){
			 this.cards[i].show(i);
			 }
		 },
		 insert_card: function (atpos) {
		     var new_cards = [];
		     for ( var i=0;i<this.cards.length;i++){
			 if (i<atpos) {
			     new_cards[i] = this.cards[i];
			 }  else 
			     if ( i > atpos) {
				 new_cards[i+1] = this.cards[i];
			 }
			     
		     }
		     
		     
		 },
		 move_to:function(xpos,ypos){
		     xpos = CP.scale(xpos);
		     ypos = CP.scale(ypos);
		     this.x = xpos;
		     this.y = ypos;
		     for (var i=0;i< this.cards.length; i++){
			 if ( this.tstack === 'H' ) {
			     this.cards[i].move_to(xpos+this.dpx*i,ypos,i);
			 }
			 if ( this.tstack === 'V' ) {
			     this.cards[i].move_to(xpos,this.dpx*i+ypos,i);
			 }
			 
			 }
		     this.update_next_pos();  
		 },
		
		 update_next_pos: function(){
		     if (this.tstack === 'H' ) {
			 this.xnext = this.x + this.cards.length*this.dpx;
			 this.ynext = this.y;
		     }
		     if (this.tstack === 'V') {
			 this.ynext = this.y + this.cards.length*this.dpx;
			 this.xnext = this.x;
		     }
		     if (this.tstack === 'P') {
			 this.ynext = this.y;
			 this.xnext = this.y;
		     }
		 },
		 jump_to:function(xpos,ypos){
		     xpos = CP.scale(xpos);
		     ypos = CP.scale(ypos);
		     this.x = xpos;
		     this.y = ypos;
		     for (var i=0;i< this.cards.length; i++){
			 if (this.tstack === 'H'){
			     this.cards[i].jump_to(xpos+this.dpx*i,ypos,i);
			 }
			 if (this.tstack === 'V'){
			     this.cards[i].jump_to(xpos,this.dpx*i+ypos,i);
			 }
			 
			 }
		     this.update_next_pos();
		 },
		 
		 get_card: function(i) {
		     return this.cards[i];
		 }
	     };
	     CP.stacks[stack_id] = stack;
	     console.log("Stack created " + stack_id + "  "  + CP.stacks[stack_id]);
	     return stack;
	 },
         create_card: function(card_id,element_id){
	     var card = {
	         card_id: card_id,
		 x: 0,
		 y: 0,
		 element_id: element_id,
		 selected: true,
             inspect: function(){
		 console.log('inspect');
		 console.log("x: " + this.x + "  " + "y: " + this.y);  
	     },
             jump_to: function(px,py,pz){
		 this.set_position(px,py);
		 this.show(this.parent,pz);
	     },
	     make_div: function() {
		 if (this.card_id != 53 ) {
		     return "<div class='card' id='" + element_id + "'>" + divs[card_id-1] +  "</div>";
		 } else {
		     return "<div class='card' id='" + element_id + "'>" + divs[52] +  "</div>";
		 };
	     },         
	     get_div: function() {
		 return $('#' + element_id);
		 },
	     on_click: function(ele){
		 alert(JSON.stringify());
	     },
             set_position: function(px,py) {
		 px = CP.scale(px);
		 py = CP.scale(py);
		 this.x = px;
		 this.y = py;
	     },
	     show: function(z){
		 this.get_div().remove();
		 this.parent = CP.get_table() || this.parent;
		 this.parent.prepend(this.make_div());
		 this.get_div().css({position: "absolute"}).css({left:this.x + "px",top:this.y+"px",zIndex:z});
		 if (this.selected){
		     this.get_div().css({"background-color" : ""});
		 }
		 else {
		     this.get_div().css({"background-color" : "white"});
		 }
		 this.get_div().click(this.on_click);
		
	     },
	     flip: function(){
		 card_id = 53;
		 this.show();
		 },
	     move_to: function(px,py,pz) {
		 px = CP.scale(px);
		 py = CP.scale(py);
		 this.get_div().snabbt({ position:[px-this.x, py-this.y ,300],
					 duration: 500,
					 delay: 10,
					 easing: 'spring'
				         });
		 this.get_div().css({position: "absolute"}).css({left:this.x + "px",top:this.y+"px",zIndex:pz})
	         this.x= px;
		 this.y = py;
	        }
		
	     };
	     return card;
	 }
     };
 }());


$(document).ready(function(){
     var ele = $("#cardtable");
     var table = CP.create_table(ele,6); 
     var card1 = CP.create_card(11,1);

    
    //  card1.show(1);
    //  card1.move_to(10,10)
    //  setTimeout(function(){ card1.move_to(10,100); },2000);
    //  setTimeout(function(){ card1.move_to(300,100);},4000);
    //  setTimeout(function(){ card1.move_to(10,10);},6000);
    //  setTimeout(function(){ 
    // 	           card1.jump_to(300,100,12); 
    // 			  },8000);
    // var stack = CP.create_stack("my",'V',500,200,20);
    // var stack2 = CP.create_stack("my1",'H',100,100,12);
    
    // var card2 = CP.create_card(24,2);    
    // stack.add_card(card2);

    // var cardAD = CP.create_card(14,"AD");   
    // var card2D = CP.create_card(15,"2D");   
    // var card7D = CP.create_card(20,"7D");   
    // var card8D = CP.create_card(21,"8D");   
    
    // stack2.add_card(cardAD);
    // stack2.add_card(card2D);
    // stack2.add_card(card7D);
    // stack2.add_card(card8D);
    // stack2.show();
    // setTimeout(function(){stack2.move_to(300,0);},6000);
    // var card3 = CP.create_card(4,11);
    // stack.add_card(card3);
    // var card5 = CP.create_card(8,12);
    // stack.add_card(card5);
    // stack.show();
    // setTimeout(function(){
    // 	stack.move_to(0,0);
    // 	},4000);
    // setTimeout(function(){
    // 	stack.jump_to(100,100);
    // 	console.log("after jump" + stack.xnext + ' ' + stack.ynext );
    // 	},8000);
    // setTimeout(function(){
    // 	stack.add_card(CP.create_card(1,17));
    // 	stack.show();
    // },9000);

    a = CP.get_data();
    for ( var i = 0; i<a.moves.length ; i++) {
	move = a.moves[i];
	//CP[move.action].apply(CP,move.params);
	CP.postopone(move,i*600);
    };

});
